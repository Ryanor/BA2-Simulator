// Array of services = complete profile
[
    // Service
    {
        // Service UUID either 4 values or complete UUID
        "uuid": "XXXX" or "0000XXXX-0000-1000-8000-00805F9B34FB",

        // Name of Service
        "name": "Service name",

        // Array of characteristics
        "characteristics": [
            {
                // Standard input fields for a characteristic:

                // Characteristic UUID
                "uuid" : "XXXX" or "0000XXXX-0000-1000-8000-00805F9B34FB",

                // Array of properties
                "properties" : [ "read", "write", "notify" ],

                //if value exists only read property possible
                "value" : null,

                // array of descriptors
                "descriptors" : [
                    {
                        // Descriptor UUID
                        "uuid" : "XXXX",

                        // value string or byte array
                        "value" : "Message in human readable form",

                        // Format of value either string or bytes
                        "data" : "string" // or "bytes",

                        // Name of Descriptor
                        "name": "Descriptor name",
                    }
                ],


                /* Extended fields for exchange format to build characteristic depending on formular data
                 *
                 * Actually there are three possible types of characteristics available:
                 *
                 * 1. Array:
                 *      - Array of values
                 *
                 * 2. Range:
                 *      - min value of range
                 *      - max value of range
                 *
                 * 3. Base:
                 *      - base value to start randomizing steps from
                 *      - min value of step
                 *      - max value of step
                 *
                 *
                 *  - type of data (float, int etc.)
                 *  - precision of digits after comma
                 *  - notification interval
                */

                // Name of Characteristic
                "name": "Characteristic name",

                // Datentypen UINT8 - UINT32, SINT8 - SINT32, FLOAT
                // data type of values
                "data" : "uint16", // "float"

                // Wert weglassen: User ist f√ºr die Daten und die Interpretation verantwortlich
                // precision means: digits after the comma
                "precision" : 2,

                // notification interval in milli seconds
                "interval" : 2000,

                // Array of values, empty if another type of characteristic is used either random or range
                "values" : [ ], // or [ 1, 2, 3, 4, 5, 6 ] or [ 36.09, 36.15, 26.26 ]

                // Base value to start stepping from, empty means either array type or range type
                "base" : 60, // or 36.30 for float

                // minimum value of range or step
                "min" : 1, // or 0.01 for float

                // maximum value of range or step
                "max" : 9, // of 0.09 for float

            }

        ]
    }

]

{ // profile name
  name: "Heart Rate Profile",
  // services array
  services: [
    // single service
    {   name: "Heart Rate Service",
        uuid: "180D",
        // characteristics array
        characteristics: [
            // single characteristic
            {   name: "Heart Rate Measurement",
                uuid: "2A37",
                value: null,
                properties: ["read","notify"],
                // descriptors array
                descriptors: [
                    // single descriptor
                    {   name: "User description",
                        uuid: "2901",
                        datatype: "string",
                        value: "Heart rate measurement in bpm."
                    } ]
                // data type of the values
                datatype: "uint16",
                // notification interval in ms
                interval: 1000,
                // offset for the value, not used yet
                offset: 0,
                // array of values
                values: [70, 67, 71, 66, 65, 60, 57, 63, 65, 64, 66, ...],
                // base value for random value generation
                base: 0,
                // maximum step for random value generation
                max: 0,
                // minimum step for random value generation
                min: 0,
            } ]
    } ]
}
